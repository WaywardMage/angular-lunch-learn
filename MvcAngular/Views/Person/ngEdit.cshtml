@using MvcAngular.Controllers
@using Newtonsoft.Json;

@model MvcAngular.Models.PersonModel

@{
    ViewBag.Title = "Edit";
    var useAngular = ((PersonController)ViewContext.Controller).useAngular;
}

@section head {
    <script src="~/Scripts/angular.min.js"></script>
    <script src="~/Scripts/angular-ui/ui-bootstrap-tpls.min.js"></script>
    <script src="~/Scripts/app/app.js"></script>
    <script src="~/Scripts/app/personController.js"></script>
    <script src="~/Scripts/app/personService.js"></script>
}
<script type="text/javascript">
    //Dirt-simple method, simply output the model to the page and we'll pick it up on the angular side.
    @Html.Raw("var person = " + @JsonConvert.SerializeObject(Model, Formatting.Indented));
</script>

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    @*<div class="form-horizontal" data-ng-app="myApp" data-ng-controller="personController" data-ng-cloak>*@
    <div class="form-horizontal" data-ng-app="myApp" data-ng-controller="personJsonController">
        <h4>PersonModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", data_ng_model = "person.name" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control", data_ng_model = "person.username" } })
                @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", data_ng_model = "person.email" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control", data_ng_model = "person.phone" } })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Website, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Website, new { htmlAttributes = new { @class = "form-control", data_ng_model = "person.website" } })
                @Html.ValidationMessageFor(model => model.Website, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save via Form Submit" class="btn btn-default" />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Save via Angular" class="btn btn-default" data-ng-click="savePerson()" />
            </div>
        </div>
    </div>
}

<div data-ng-app="myApp" data-ng-controller="personJsonController">
    <a href="/Person@(useAngular ? "?useAngular=true" : string.Empty)">Back to List</a>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
